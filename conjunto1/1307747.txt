 #include&amp;lt;stdio.h&amp;gt;
#include&amp;lt;string.h&amp;gt;            //strcpy()  used
#include&amp;lt;malloc.h&amp;gt;            //malloc()  used
#include&amp;lt;unistd.h&amp;gt;            //fork()  used
#include&amp;lt;stdlib.h&amp;gt;            //exit()  function  used
#include&amp;lt;sys/wait.h&amp;gt;        //waitpid()  used

int  main(int  argc,  char  **argv)
{
        char  command[256];
        char  **args=NULL;
        char  *arg;
        int  count=0;
        char  *binary;
        pid_t  pid;
        printf("Enter  the  name  of  the  executable(with  full  path)");
        fgets(command,256,stdin);
        binary=strtok(command,"  ");
        args=malloc(sizeof(char*)*10);
        args[0]=malloc(strlen(binary)+1);
        strcpy(args[0],binary);
        while  ((arg=strtok(NULL,"  "))!=NULL)
        {
                if  (  count%10  ==  0)  args=realloc(args,sizeof(char*)*10);
                count++;
                args[count]=malloc(strlen(arg));
                strcpy(args[count],arg);
        }
        args[++count]=NULL;
        if  ((pid  =  fork())  ==  -1)
        {
                perror("Error  forking...\n");
                exit(1);
        }
        if  (pid  ==  0)
        {
                printf("Starting  the  executable  as  a  new  child  process...\n");
                printf("Binary  file  to  be  executed:  %s\n",binary);
                execve(args[0],args,NULL);
        }
        else
        {
                int  status;
                waitpid(-1,  &amp;amp;status,  0);
                printf("Status  returned  by  Child  process:  %d\n",WEXITSTATUS(status));
        }
        return  0;
}
 
