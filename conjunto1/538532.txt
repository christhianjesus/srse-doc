 //  Compute  C  =  A  *  B
__global__  void  matrixMultiplyShared(float  *  A,  float  *  B,  float  *  C,
                                          int  numARows,  int  numAColumns,
                                          int  numBRows,  int  numBColumns,
                                          int  numCRows,  int  numCColumns)  {
        __shared__  float  ds_A[TILE_WIDTH_I][TILE_WIDTH_I];
        __shared__  float  ds_B[TILE_WIDTH_I][TILE_WIDTH_I];

        int  bx  =  blockIdx.x;
        int  by  =  blockIdx.y;
        int  tx  =  threadIdx.x;
        int  ty  =  threadIdx.y;

        int  Row  =  by  *  TILE_WIDTH  +  ty;
        int  Col  =  bx  *  TILE_WIDTH  +  tx;
        float  cValue  =  0;

        for  (int  m  =  0;  m  &amp;lt;  (numAColumns/TILE_WIDTH);  m++)  {
                if  (Row  &amp;lt;  numARows  &amp;amp;&amp;amp;  m*TILE_WIDTH_I  +  tx  &amp;lt;  numAColumns)  {
                    ds_A[ty][tx]  =  A[Row*numAColumns  +  m*TILE_WIDTH_I  +  tx];
                }  else  {
                  ds_A[ty][tx]  =  0;
              }

                if  (m*TILE_WIDTH_I  +  ty  &amp;lt;  numBRows  &amp;amp;&amp;amp;  Col  &amp;lt;  numBColumns)  {
                    ds_B[ty][tx]  =  B[(m*TILE_WIDTH_I  +  ty)*numBColumns  +  Col];
              }  else  {
                  ds_B[ty][tx]  =  0;
              }

                __syncthreads();

                if  ((Row  &amp;lt;  numCRows)  &amp;amp;&amp;amp;  (Col  &amp;lt;  numCColumns))  {
                        for  (int  k  =  0;  k  &amp;lt;  TILE_WIDTH;  k++)  {
                                cValue  +=  ds_A[ty][k]  *  ds_B[k][tx];
                        }
                }

                __syncthreads();
        }

        if  ((Row  &amp;lt;  numCRows)  &amp;amp;&amp;amp;  (Col  &amp;lt;  numCColumns))  {
                C[Row*numCColumns  +  Col]  =  cValue;
        }
}
 
