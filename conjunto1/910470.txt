 if  (pipe(cgiPipe))
{
    perror("pipe");
}

cgiPid  =  fork();

if  (cgiPid  ==  0)
{

    /*  child  */

    /*  piping  the  POST  content...  */

    close(cgiPipe[1]);

    /*  redirecting  the  output  of  the  pipe  to  the  STDIN  of  the  child  process  */
    dup2(cgiPipe[0],  STDIN_FILENO);
    /*  redirecting  STDOUT  of  the  child  process  to  the  remote  client  */
    dup2(nRemote,  STDOUT_FILENO);
    setuid(nUserID);

    if  (execve(sLocalPath,  NULL,  aCGIEnv))
    {
        /*  unable  to  execute  CGI...  */
        perror("execve");
        sendString(nRemote,
                "HTTP/1.1  200  OK\r\n"
                "Content-length:  97\r\n"
                "Content-Type:  text/html\r\n\r\n"
                "&amp;lt;!doctype  html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;CGI  Error&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;CGI  Error.&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;\r\n"
        );
    }

    goto  closeThread;

}
else  if  (cgiPid  &amp;gt;  0)
{

    /*  parent  */

    close(cgiPipe[0]);

    /*  first,  send  the  truncated  part  of  the  POST  string  contained  within  the  request  string...  */
    if  (nPOSTLength  &amp;amp;&amp;amp;  (nSentChrs  =  write(cgiPipe[1],  sPOSTSegment,  
            nReqLen  +  requestString  -  sPOSTSegment))  &amp;gt;  0)
    {
        nPOSTLength  -=  nSentChrs;

        /*  after,  read  and  send  the  rest  of  the  POST  string  not  received  yet...  */
        while  (nPOSTLength  &amp;gt;  0  &amp;amp;&amp;amp;  (nReadChrs  =  read(nRemote,  reservedBuffer,  
                BUFFER_SIZE_PER_USER))  &amp;gt;  0  &amp;amp;&amp;amp;  (nSentChrs  =  write(cgiPipe[1],  reservedBuffer,  
                nReadChrs))  &amp;gt;  0  &amp;amp;&amp;amp;  nReadChrs  ==  nSentChrs)
        {
            nPOSTLength  -=  nReadChrs;
        }

        if  (nReadChrs  &amp;lt;  0)
        {
            printf("Error  reading  POST  string.\n");
            goto  closeThread;
        }
        if  (nSentChrs  &amp;lt;  0)
        {
            printf("Error  sending  POST  string.\n");
            goto  closeThread;
        }
    }
    else
    {
        write(cgiPipe[1],  "(null)",  6);
    }

    /*  wait  for  child  process.  */
    if  (waitpid(cgiPid,  NULL,  0)  ==  -1)
    {
        perror("wait");
    }

    goto  closeThread;

}
else
{

    /*  parent  */

    perror("fork");

    /*  let's  try  to  send  it  as  normal  file,  if  the  user  has  the  right  permissions...  */

}
 
