 #include  &amp;lt;sys/types.h&amp;gt;
#include  &amp;lt;sys/socket.h&amp;gt;
#include  &amp;lt;stdio.h&amp;gt;
#include  &amp;lt;sys/un.h&amp;gt;
#include  &amp;lt;unistd.h&amp;gt;
#include  &amp;lt;netinet/in.h&amp;gt;
#include  &amp;lt;arpa/inet.h&amp;gt;  //  kvuli  inet_ntop
#include  &amp;lt;unistd.h&amp;gt;
#include  &amp;lt;signal.h&amp;gt;
#include  &amp;lt;stdlib.h&amp;gt;

#define  MYADDRESS  "127.0.0.1"    //  the  port  users  will  be  connecting  to
#define  MYPORT  10000    //  the  port  users  will  be  connecting  to
#define  MYFRONTA  10  //  length  of  queue
#define  MYMSGLEN  80  //max  len  of  message

int  sendMessage(char*  msg,  int  socket){
        int  length  =  strlen(msg);
        int  ret;

        ret  =  write(socket,  msg,  length);
        return  ret;
}

int  readLine(void  *vptr,  size_t  maxlen,  int  sockd)  {
        int  n,  rc;
        char        c,  *buffer;

        buffer  =  vptr;

        for  (  n  =  1;  n  &amp;lt;  maxlen;  n++  )  {

                if  (  (rc  =  read(sockd,  &amp;amp;c,  1))  ==  1  )  {
                        *buffer++  =  c;
                        if  (  c  ==  '\n'  )
                                break;
                }
                else  if  (  rc  ==  0  )  {
                        if  (  n  ==  1  )
                                return  0;
                        else
                                break;
                }

        }

        *buffer  =  0;
        return  n;
}

int  main(int  argc,  char  **argv)
{
        int  server_sockfd,  client_sockfd;
        socklen_t  server_len,  client_len;
        struct  sockaddr_in  server_address;
        struct  sockaddr_in  client_address;

        server_sockfd  =  socket(  AF_INET,  SOCK_STREAM,  0  );
        server_address.sin_family  =  AF_INET;
        server_address.sin_addr.s_addr  =  inet_addr(  MYADDRESS  );
        server_address.sin_port  =  htons(  MYPORT  );

        server_len  =  sizeof(  server_address  );
        //If  the  server  binding  fails
                if(  bind(  server_sockfd,  (  struct  sockaddr  *)&amp;amp;server_address,  server_len  )  !=  0  )
                {
                                perror("oops:  server-tcp-single");
                                exit(  1  );
                }

        listen(  server_sockfd,  MYFRONTA  );

        signal(  SIGCHLD,  SIG_IGN  );//Zombie  process  protection

        while(  1  )
        {
                printf(  "server  wait...\n"  );

                client_len  =  sizeof(  client_address  );
                client_sockfd  =  accept(  server_sockfd,  (  struct  sockaddr  *)&amp;amp;client_address,  &amp;amp;client_len  );
                //Info
                char  str[INET_ADDRSTRLEN];
                inet_ntop(AF_INET,&amp;amp;(client_address.sin_addr),  str,  INET_ADDRSTRLEN);
                printf(  "Connected  client  from  %s\n",  str  );

                if(  fork()  ==  0  )
                {
                        char  retezec[MYMSGLEN];
                        readLine(retezec,  MYMSGLEN,  client_sockfd);

                        printf(  "Klient  sent  :  %s\n",  retezec  );
                        printf(  "Server  sends  :  %s\n",  retezec  );
                        sendMessage(retezec,  client_sockfd);
                                close(  client_sockfd  );

                        exit  (0  );
                }
                else
                        close(  client_sockfd  );

        }
        return  EXIT_SUCCESS;
}
 
