 #include  &amp;lt;iostream&amp;gt;
#include  &amp;lt;stdio.h&amp;gt;
#include  &amp;lt;stdlib.h&amp;gt;
#include  &amp;lt;sstream&amp;gt;
#include  &amp;lt;curl/curl.h&amp;gt;
#include  &amp;lt;string&amp;gt;
#include  "Parameter.h"
#include  "lib_json/json.h"

using  namespace  std;

static  size_t  write_data(void  *ptr,  size_t  size,  size_t  nmemb,  void  *stream)
{
        cout  &amp;lt;&amp;lt;  "--&amp;gt;write_data  "  &amp;lt;&amp;lt;  endl;
        string  buf  =  string(static_cast&amp;lt;char  *&amp;gt;(ptr),  size  *nmemb);
        stringstream  *  response  =  static_cast&amp;lt;stringstream  *&amp;gt;(stream);
        response-&amp;gt;write(buf.c_str(),  (streamsize)buf.size());
        return  size  *  nmemb;

}


int  main(int  sys_argc,  char  **  sys_argv)  {
        CURL  *curl;
        CURLcode  res;
        stringstream  response;
        string  error;

        char  **  argv  =  sys_argv;


        string  file  =  argv[1];
        Parameter  *parms  =  new  Parameter(file);
        parms-&amp;gt;ReadParameters();

        cout  &amp;lt;&amp;lt;  "URL:  "  &amp;lt;&amp;lt;  parms-&amp;gt;GetParameter("URL");


        curl_global_init(CURL_GLOBAL_ALL);
        curl  =  curl_easy_init();
        if(curl)
        {
                curl_easy_setopt(curl,  CURLOPT_URL,  parms-&amp;gt;GetParameter("URL").c_str());
                curl_easy_setopt(curl,  CURLOPT_WRITEFUNCTION,  write_data);
                curl_easy_setopt(curl,  CURLOPT_WRITEDATA,  &amp;amp;response);
                res  =  curl_easy_perform(curl);

                cout  &amp;lt;&amp;lt;  "Playlists-JSON:  "  &amp;lt;&amp;lt;  response.str()  &amp;lt;&amp;lt;  endl;
                curl_easy_cleanup(curl);
        }

        Json::Value  root;
        Json::Reader  reader;

        bool  parsingSuccessful  =  reader.parse(response.str(),  root);

        if(!parsingSuccessful)
        {
                cout  &amp;lt;&amp;lt;  "Failed  to  parse  configuration.  "  &amp;lt;&amp;lt;  reader.getFormatedErrorMessages();
                return  16;
        }

        cout  &amp;lt;&amp;lt;  "Pretty-Print:  "  &amp;lt;&amp;lt;  root.toStyledString()  &amp;lt;&amp;lt;  endl;
        const  Json::Value  fields  =  root["fields"]["songs"];


        return  0;
}
 
