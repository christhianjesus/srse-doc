 imagename=s;
ILboolean  success;
ilInit();
ilGenImages(1,  &amp;amp;id);
ilBindImage(id);
success  =  ilLoadImage((const  ILstring)imagename.c_str());
if  (success)
{
        success  =  ilConvertImage(IL_RGB,  IL_UNSIGNED_BYTE);  /*  Convert  every  colour  component  into
                                                                                                                  unsigned  byte.  If  your  image  contains  alpha  channel  you  can  replace  IL_RGB  with  IL_RGBA  */
        if  (!success)
        {
                printf("image  conversion  failed.");
        }
        glGenTextures(1,  &amp;amp;id);
        glBindTexture(GL_TEXTURE_2D,  id);

        width  =  ilGetInteger(IL_IMAGE_WIDTH);
        height  =  ilGetInteger(IL_IMAGE_HEIGHT);

        glTexImage2D(GL_TEXTURE_2D,  0,  ilGetInteger(IL_IMAGE_BPP),  ilGetInteger(IL_IMAGE_WIDTH),
                                  ilGetInteger(IL_IMAGE_HEIGHT),  0,  ilGetInteger(IL_IMAGE_FORMAT),  GL_UNSIGNED_BYTE,
                                  ilGetData());
        glTexParameteri(GL_TEXTURE_2D,  GL_TEXTURE_WRAP_S,  GL_REPEAT);              //  Linear  Filtered
        glTexParameteri(GL_TEXTURE_2D,  GL_TEXTURE_WRAP_T,  GL_REPEAT);              //  Linear  Filtered
        glTexParameteri(GL_TEXTURE_2D,  GL_TEXTURE_MAG_FILTER,  GL_LINEAR);
        glTexParameteri(GL_TEXTURE_2D,  GL_TEXTURE_MIN_FILTER,  GL_LINEAR);
 
