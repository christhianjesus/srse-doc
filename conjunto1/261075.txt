 #pragma  once

#include  &amp;lt;exception&amp;gt;
#include  &amp;lt;string&amp;gt;


#ifdef  SAMPLEDLL_EXPORTS
#        define  DECLSPECIFIER  __declspec(dllexport)
#        define  EXPIMP_TEMPLATE
#else
#        define  DECLSPECIFIER  __declspec(dllimport)
#        define  EXPIMP_TEMPLATE  extern
#endif

//disable  warnings  on  extern  before  template  instantiation  (per  MS  KB  article)
#pragma  warning  (disable  :  4231)
//std::basic_string  depends  on  this  allocator,  so  it  must  also  be  exported.
EXPIMP_TEMPLATE  template  class  DECLSPECIFIER  std::allocator&amp;lt;char&amp;gt;;
//std::string  is  a  typedef,  so  you  cannot  export  it.    You  must  export  std::basic_string
EXPIMP_TEMPLATE  template  class  DECLSPECIFIER  std::basic_string&amp;lt;  char,  std::char_traits&amp;lt;char&amp;gt;,  std::allocator&amp;lt;char&amp;gt;  &amp;gt;;
#pragma  warning  (default  :  4231)

class  DECLSPECIFIER  MyClass
{
public:
        std::string  getData();  //returns  'data',  body  in  CPP  file
private:
        std::string  data;
        int  data2;
};

//in  SampleDLL.cpp  file...
std::string  MyClass::getData()  {  return  data;  }
 
